package com.example.doctour.data.baseimport android.content.ContentValues.TAGimport android.net.Uriimport android.nfc.Tagimport android.util.Logimport android.widget.Toastimport androidx.paging.PagingSourceimport androidx.paging.PagingStateimport com.example.doctour.data.utils.DataMapperimport retrofit2.HttpExceptionimport retrofit2.Responseimport java.io.IOExceptionimport java.io.InterruptedIOExceptionprivate const val BASE_STARTING_PAGE_INDEX = 1abstract class BasePagingSource<ValueDto : DataMapper<Value>, Value : Any>(    private val request: suspend (position: Int) -> Response<BaseResponse<ValueDto>>) : PagingSource<Int, Value>() {    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Value> {        val position = params.key ?: 1        return try {            val response = request(position)            val data = response.body()!!            val nextPage = when (data?.next) {                null -> null                else -> Uri.parse(data.next).getQueryParameter("page")?.toInt()            }            LoadResult.Page(                data = data.results.map { it.mapToDomain() },                prevKey = null,                nextKey = nextPage            )        } catch (e: IOException) {            Log.e(TAG ,"OIException")            LoadResult.Error(e)        }        catch (e:HttpException){            Log.e(TAG ,"HTTp")            LoadResult.Error(e)        }        catch (e:NullPointerException){            Log.e(TAG ,"NULL")            LoadResult.Error(e)        }    }    override fun getRefreshKey(state: PagingState<Int, Value>): Int? {        return state.anchorPosition?.let { anchorPosition ->            val anchorPage = state.closestPageToPosition(anchorPosition)            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)        }    }}